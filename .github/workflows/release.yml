name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get Go Version
        run: |
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.4.0
        with:
          go-version: ${{ env.GOVERSION }}

      - name: Cache Go modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GOVERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GOVERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run linter
        run: make lint

  build_binaries:
    name: Build Binaries
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for Cosign
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get Go Version
        run: |
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.4.0
        with:
          go-version: ${{ env.GOVERSION }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_ENV

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="mdfmt-${{ env.VERSION_NO_V }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          LDFLAGS="-s -w -X github.com/Gosayram/go-mdfmt/internal/version.Version=${{ env.VERSION_NO_V }}"
          LDFLAGS="$LDFLAGS -X github.com/Gosayram/go-mdfmt/internal/version.Commit=${{ github.sha }}"
          LDFLAGS="$LDFLAGS -X github.com/Gosayram/go-mdfmt/internal/version.Date=$(date -u +%Y-%m-%d_%H:%M:%S)"
          LDFLAGS="$LDFLAGS -X github.com/Gosayram/go-mdfmt/internal/version.BuiltBy=github-actions"
          
          go build -ldflags="$LDFLAGS" -o "${BINARY_NAME}" ./cmd/mdfmt
          
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Install Cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        with:
          cosign-release: 'v2.4.3'

      - name: Sign binary with Cosign (with private key)
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          # Create temporary private key file from secret
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          
          # Sign the binary using private key with password
          cosign sign-blob --yes \
            --key cosign.key \
            --output-certificate ${{ env.BINARY_NAME }}.pem \
            --output-signature ${{ env.BINARY_NAME }}.sig \
            ${{ env.BINARY_NAME }}
          
          # Clean up private key file
          rm -f cosign.key
          
          # Generate checksums
          sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          sha512sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha512
          
          # Create verification instructions
          cat > ${{ env.BINARY_NAME }}.verify << EOF
          # Verify this binary with Cosign
          # 1. Install cosign: https://docs.sigstore.dev/cosign/installation/
          # 2. Get the public key from: https://github.com/${{ github.repository }}/releases
          # 3. Run verification:
          cosign verify-blob \\
            --key cosign.pub \\
            --signature ${{ env.BINARY_NAME }}.sig \\
            ${{ env.BINARY_NAME }}
          
          # Or verify checksum:
          sha256sum -c ${{ env.BINARY_NAME }}.sha256
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: mdfmt-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.BINARY_NAME }}
            ${{ env.BINARY_NAME }}.sig
            ${{ env.BINARY_NAME }}.pem
            ${{ env.BINARY_NAME }}.sha256
            ${{ env.BINARY_NAME }}.sha512
            ${{ env.BINARY_NAME }}.verify
          retention-days: 1

  create_release:
    name: Create Release
    needs: build_binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        with:
          cosign-release: 'v2.4.3'

      - name: Generate public key
        run: |
          # Create temporary private key file from secret
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          
          # Generate public key from private key
          cosign public-key --key cosign.key > cosign.pub
          
          # Clean up private key file
          rm -f cosign.key

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Commits since $LAST_TAG:" >> changelog.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> changelog.md
          else
            echo "### Recent commits:" >> changelog.md
            git log --pretty=format:"- %s (%h)" -10 >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Installation" >> changelog.md
          echo "" >> changelog.md
          echo "Download the appropriate binary for your platform from the assets below." >> changelog.md
          echo "" >> changelog.md
          echo "### Linux/macOS:" >> changelog.md
          echo '```bash' >> changelog.md
          echo "# Download binary" >> changelog.md
          echo "curl -L -o mdfmt https://github.com/Gosayram/go-mdfmt/releases/download/${{ env.VERSION }}/mdfmt-*-linux-amd64" >> changelog.md
          echo "" >> changelog.md
          echo "# Make executable and move to PATH" >> changelog.md
          echo "chmod +x mdfmt" >> changelog.md
          echo "sudo mv mdfmt /usr/local/bin/" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "### Windows:" >> changelog.md
          echo "Download the .exe file and add it to your PATH." >> changelog.md
          echo "" >> changelog.md
          echo "### Verification:" >> changelog.md
          echo "All binaries are signed with Cosign and include checksums for verification:" >> changelog.md
          echo '```bash' >> changelog.md
          echo "# Verify checksum" >> changelog.md
          echo "sha256sum -c mdfmt-*-linux-amd64.sha256" >> changelog.md
          echo "" >> changelog.md
          echo "# Verify Cosign signature (requires cosign CLI)" >> changelog.md
          echo "cosign verify-blob \\\\" >> changelog.md
          echo "  --certificate mdfmt-*-linux-amd64.pem \\\\" >> changelog.md
          echo "  --signature mdfmt-*-linux-amd64.sig \\\\" >> changelog.md
          echo "  --certificate-identity-regexp \"https://github.com/${{ github.repository }}/\" \\\\" >> changelog.md
          echo "  --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\\" >> changelog.md
          echo "  mdfmt-*-linux-amd64" >> changelog.md
          echo '```' >> changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: changelog.md
          files: |
            ./artifacts/**/*
            cosign.pub
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  build_docker:
    name: Build and Push Docker Image
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=mdfmt
            org.opencontainers.image.description="Fast, reliable Markdown formatter"
            org.opencontainers.image.version=${{ env.VERSION_NO_V }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }} 